===================================================================================================================================
#### what if i want to get the data from the user and i want to call a method to add the data to the list

import java.util.LinkedList;
import java.util.Scanner;

public class Main {
    private static LinkedList<AccountDetails> accountList = new LinkedList<>();
    private static LinkedList<BookDetails> bookList = new LinkedList<>();
    private static LinkedList<LogDetails> logList = new LinkedList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        displayMenu();
    }

    private static void displayMenu() {
        boolean exit = false;
        while (!exit) {
            System.out.println("LIBRARY MANAGEMENT SYSTEM");
            System.out.println("[1] Add Account Details");
            System.out.println("[2] Add Book Details");
            System.out.println("[3] Add Log Details");
            System.out.println("[4] Display Account Details");
            System.out.println("[5] Display Book Details");
            System.out.println("[6] Display Log Details");
            System.out.println("[7] Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    addAccountDetails();
                    break;
                case 2:
                    addBookDetails();
                    break;
                case 3:
                    addLogDetails();
                    break;
                case 4:
                    displayAccountDetails();
                    break;
                case 5:
                    displayBookDetails();
                    break;
                case 6:
                    displayLogDetails();
                    break;
                case 7:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private static void addAccountDetails() {
        System.out.print("Enter student ID: ");
        String studentID = scanner.nextLine();

        System.out.print("Enter student name: ");
        String studentName = scanner.nextLine();

        AccountDetails account = new AccountDetails(studentID, studentName);
        accountList.add(account);

        System.out.println("Account details added successfully.\n");
    }

    private static void addBookDetails() {
        System.out.print("Enter book number: ");
        int bookNum = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        System.out.print("Enter book title: ");
        String bookTitle = scanner.nextLine();

        System.out.print("Enter book author: ");
        String bookAuthor = scanner.nextLine();

        BookDetails book = new BookDetails(bookNum, bookTitle, bookAuthor);
        bookList.add(book);

        System.out.println("Book details added successfully.\n");
    }

    private static void addLogDetails() {
        System.out.print("Enter date: ");
        String date = scanner.nextLine();

        System.out.print("Enter time: ");
        String time = scanner.nextLine();

        System.out.print("Enter name: ");
        String name = scanner.nextLine();

        System.out.print("Enter status: ");
        String status = scanner.nextLine();

        System.out.print("Enter item: ");
        String item = scanner.nextLine();

        LogDetails log = new LogDetails(date, time, name, status, item);
        logList.add(log);

        System.out.println("Log details added successfully.\n");
    }

    private static void displayAccountDetails() {
        System.out.println("Account Details:");
        for (AccountDetails account : accountList) {
            System.out.println(account);
        }
        System.out.println();
    }

    private static void displayBookDetails() {
                System.out.println("Book Details:");
        for (BookDetails book : bookList) {
            System.out.println(book);
        }
        System.out.println();
    }

    private static void displayLogDetails() {
        System.out.println("Log Details:");
        for (LogDetails log : logList) {
            System.out.println(log);
        }
        System.out.println();
    }
}

class AccountDetails {
    private String studentID;
    private String studentName;

    public AccountDetails(String studentID, String studentName) {
        this.studentID = studentID;
        this.studentName = studentName;
    }

    @Override
    public String toString() {
        return "Student ID: " + studentID + ", Student Name: " + studentName;
    }
}

class BookDetails {
    private int bookNum;
    private String bookTitle;
    private String bookAuthor;

    public BookDetails(int bookNum, String bookTitle, String bookAuthor) {
        this.bookNum = bookNum;
        this.bookTitle = bookTitle;
        this.bookAuthor = bookAuthor;
    }

    @Override
    public String toString() {
        return "Book Number: " + bookNum + ", Title: " + bookTitle + ", Author: " + bookAuthor;
    }
}

class LogDetails {
    private String date;
    private String time;
    private String name;
    private String status;
    private String item;

    public LogDetails(String date, String time, String name, String status, String item) {
        this.date = date;
        this.time = time;
        this.name = name;
        this.status = status;
        this.item = item;
    }

    @Override
    public String toString() {
        return "Date: " + date + ", Time: " + time + ", Name: " + name + ", Status: " + status + ", Item: " + item;
    }
}

===================================================================================================================================


===================================================================================================================================
#### what if i want to save all those data in a file

import java.io.FileWriter;
import java.io.IOException;

public class LinkedListToFile {
    private static final String FILE_PATH = "data.txt";

    public static void saveLinkedListToFile(Node head) {
        try (FileWriter writer = new FileWriter(FILE_PATH)) {
            Node currentNode = head;
            while (currentNode != null) {
                String dataEntry = currentNode.data.toString(); // Assuming the data object has overridden toString() method
                writer.write(dataEntry + "\n");
                currentNode = currentNode.next;
            }
            System.out.println("Data saved to file successfully.");
        } catch (IOException e) {
            System.out.println("Error occurred while saving data to file.");
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Assuming you have a linked list called 'head' with data objects stored in each node
        // Call the method to save the linked list data to a file
        saveLinkedListToFile(head);
    }

    private static class Node {
        private Object data;
        private Node next;

        public Node(Object data) {
            this.data = data;
            this.next = null;
        }
    }
}

===================================================================================================================================


===================================================================================================================================
#### how to scan the list to check if the user input is already in the list? 

public boolean isValueInList(String userInput, LinkedList<AccountDetails> list) {
    Node<AccountDetails> current = list.getHead();
    
    while (current != null) {
        if (current.getData().getStudentID().equals(userInput)) {
            return true; // Found a match
        }
        
        current = current.getNext();
    }
    
    return false; // Value not found in the list
}

===================================================================================================================================


===================================================================================================================================
#### what if the user want to edit his account details in the list

public void editAccountDetails(String studentID, LinkedList<AccountDetails> list) {
    Node<AccountDetails> current = list.getHead();

    while (current != null) {
        if (current.getData().getStudentID().equals(studentID)) {
            // Match found, prompt the user for updated details
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter new student name: ");
            String newStudentName = scanner.nextLine();

            // Update the account details
            current.getData().setStudentName(newStudentName);

            System.out.println("Account details updated successfully.");
            return;
        }

        current = current.getNext();
    }

    System.out.println("Account not found in the list.");
}

===================================================================================================================================


===================================================================================================================================
#### what parameters should i use if im going to call that method? 

String studentIDToEdit = "12345";  // The student ID of the account to edit
LinkedList<AccountDetails> accountList = new LinkedList<>();  // Your existing list of accounts

// Call the method to edit the account details
editAccountDetails(studentIDToEdit, accountList);

===================================================================================================================================


===================================================================================================================================
####

public static void borrowBook(int x) {
    int count, userNum;
    boolean isValid = false;

    // Search the book
    for (BookDetails book : bookList) {
        if (book.getBookNum() == x) {

            // Get current date and time
            LocalDate currentDate = LocalDate.now();
            int currYear = currentDate.getYear();
            int currMonth = currentDate.getMonthValue();
            int currDay = currentDate.getDayOfMonth();

            displayCurrentBook(x);

            if (verifyAccount(1) == 1) {
                String temp = new String(book.getBookTitle());
                count = 0;
                while (!isValid) {
                    if (count < 3) {
                        System.out.println("BOOK COPIES TO BE BORROWED: ");
                        try {
                            userNum = scan.nextInt();
                            if (userNum > 0 && userNum < book.getBookQuantity()) {
                                book.setBookQuantity(book.getBookQuantity() - userNum);

                                // Save the borrowed book to the flash drive
                                File fp = new File(Vars.LMSFlashDrive + "\\borrowedBooks.txt");
                                do {
                                    fp.createNewFile();
                                } while (!fp.exists());

                                try (BufferedWriter fprint = new BufferedWriter(new FileWriter(fp, true))) {
                                    fprint.write(/* Write the borrowed book details to the file */);
                                    // You need to define how to write the borrowed book details to the file
                                }
                            }
                        } catch (InputMismatchException e) {
                            System.out.println("Invalid input. Please enter a valid number.");
                            scan.nextLine(); // Clear the input buffer
                        }
                    } else {
                        System.out.println("You have reached the maximum number of attempts.");
                        break;
                    }
                    count++;
                }
            }
        }
    }
}
